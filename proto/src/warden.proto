syntax = "proto3";
package warden;

enum RangeType {
    PRIMARY = 0;
    SECONDARY = 1;
}

message RangeId {
    // This is the Uuid of the keyspace.
    string keyspace_id = 1;
    string range_id = 2;
}

// We need the type of the range because primary and secondary ranges are
// handled differently. Primary ranges serve client requests, while secondary
// ranges serve client stale reads and replication traffic.
message RangeIdAndType {
    RangeId range = 1;
    RangeType type = 2;
}

message ReplicationMapping {
    RangeId primary_range = 1;
    RangeId secondary_range = 2;
    string  assignee = 3;
}

message HostInfo {
    string identity = 1;
    string zone = 2;
    // The epoch is used to handle out of order registration/deregistration.
    // Imagine the case where a range server is restarted and registers with the
    // warden. Warden might see the new registration request before it sees the gRPC
    // connection for the old instance error out. The epoch helps to ensure that Warden
    // can properly handle this case by ignoring the error for the old instance.
    uint64 epoch = 3;
}

service Warden {
    // Called by a range server to register itself with its regional warden.
    // Establishes a long-lived stream for the range server to continuously receive
    // assignment updates from the warden.
    rpc RegisterRangeServer(RegisterRangeServerRequest) returns (stream WardenUpdate) {}
}

// A full assignment of ranges to a range server. The monotonically increasing version field indicates the
// version of the full assignment, and the range field contains the list of ranges
// that the range server is responsible for.
message FullAssignment {
   int64 version = 1;
   repeated RangeIdAndType range = 2;
   repeated ReplicationMapping replication_mapping = 3;
}

// An incremental assignment of ranges to a range server. The monotonically increasing version field indicates the
// version of the incremental assignment, and the previous_version field indicates the version that this
// incremental assignment is based on. The load field contains the list of ranges that the range server
// should start serving, and the unload field contains the list of ranges that the range server should stop
// serving. Clients should reestablish connection to receive a full update if they don't have the assignment referred to by previous_version.
message IncrementalAssignment {
    int64 version = 1;
    int64 previous_version = 2;
    repeated RangeIdAndType load = 3;
    repeated RangeIdAndType unload = 4;
    repeated ReplicationMapping load_mapping = 5;
    repeated ReplicationMapping unload_mapping = 6;
}

message WardenUpdate {
    oneof update {
        FullAssignment full_assignment = 1;
        IncrementalAssignment incremental_assignment = 2;
    }
}

message RegisterRangeServerRequest {
    HostInfo range_server = 1;
}
